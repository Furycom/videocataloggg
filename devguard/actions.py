from __future__ import annotations

from dataclasses import dataclass
from dataclasses import dataclass
from pathlib import Path
from typing import List, Sequence

from .metrics import DEFAULT_OVERSIZE_LINES, collect_metrics


@dataclass(slots=True)
class SplitSuggestion:
    path: Path
    reason: str
    suggested_modules: Sequence[str]


def suggest_splits(root: Path, *, threshold: int = DEFAULT_OVERSIZE_LINES) -> List[SplitSuggestion]:
    metrics = collect_metrics(root)
    suggestions: List[SplitSuggestion] = []
    for metric in metrics:
        reasons: List[str] = []
        suggested: List[str] = []
        if metric.total_lines >= threshold:
            reasons.append(f"File has {metric.total_lines} lines (>{threshold})")
            largest = sorted(metric.functions, key=lambda f: f.lines, reverse=True)[:3]
            for func in largest:
                suggested.append(f"{metric.path.stem}_{func.name}")
        if metric.is_gui and metric.heavy_imports:
            heavy = ", ".join(metric.heavy_imports)
            reasons.append(f"GUI file imports heavy libraries: {heavy}")
            suggested.append(f"{metric.path.stem}_runtime")
        if reasons:
            suggestions.append(
                SplitSuggestion(
                    path=metric.path,
                    reason="; ".join(reasons),
                    suggested_modules=tuple(dict.fromkeys(suggested)),
                )
            )
    return suggestions


_SKELETON_TEMPLATE = """Autogenerated devguard skeleton. Fill with orchestration logic and keep heavy work outside GUI."""


_DEF_TEMPLATE = """from __future__ import annotations

from typing import Any


class Runner:
    def __init__(self) -> None:
        raise NotImplementedError

    def run(self, payload: Any) -> None:
        raise NotImplementedError("Implement module runner")
"""


def create_skeleton(path: Path) -> Path:
    if path.exists():
        raise FileExistsError(path)
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w", encoding="utf-8") as handle:
        handle.write(_SKELETON_TEMPLATE)
        handle.write("\n\n")
        handle.write(_DEF_TEMPLATE)
    return path
